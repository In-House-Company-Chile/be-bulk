require('dotenv').config();
const ProcesarDocumentosJSON = require('./functions/ProcesarDocumentosJSON');
const path = require('path');

/**
 * Script principal para procesar el archivo JSON masivo
 */
async function main() {
    try {
        console.log('üöÄ Iniciando procesamiento de archivo JSON masivo...\n');

        // Configuraci√≥n del procesamiento
        const config = {
            // Ruta al archivo JSON (ajusta seg√∫n tu ubicaci√≥n)
            jsonFilePath: process.env.JSON_FILE_PATH || 'c:\\Users\\ljutr\\Desktop\\buscadorDB.normas.json',
            
            // Nombre de la colecci√≥n en Qdrant
            collectionName: process.env.QDRANT_COLLECTION || 'normas_juridicas',
            
            // Opciones de procesamiento
            options: {
                batchSize: parseInt(process.env.BATCH_SIZE) || 25,          // Lotes m√°s peque√±os para JSON masivo
                startFrom: parseInt(process.env.START_FROM) || 0,           // √çndice para resumir
                maxDocuments: parseInt(process.env.MAX_DOCUMENTS) || null,  // L√≠mite (null = todos)
                logInterval: parseInt(process.env.LOG_INTERVAL) || 50,      // Log cada 50 docs
                pauseBetweenBatches: parseInt(process.env.PAUSE_MS) || 3000 // Pausa 3 segundos entre lotes
            }
        };

        console.log('üìã Configuraci√≥n del procesamiento:');
        console.log(`   üìÑ Archivo JSON: ${config.jsonFilePath}`);
        console.log(`   üóÇÔ∏è Colecci√≥n: ${config.collectionName}`);
        console.log(`   üì¶ Tama√±o de lote: ${config.options.batchSize}`);
        console.log(`   üéØ Empezar desde: ${config.options.startFrom}`);
        console.log(`   üìä M√°ximo documentos: ${config.options.maxDocuments || 'Todos'}`);
        console.log(`   ‚è±Ô∏è Log cada: ${config.options.logInterval} documentos`);
        console.log(`   ‚è∏Ô∏è Pausa entre lotes: ${config.options.pauseBetweenBatches}ms\n`);

        // Verificar que el archivo existe
        const fs = require('fs');
        if (!fs.existsSync(config.jsonFilePath)) {
            throw new Error(`Archivo no encontrado: ${config.jsonFilePath}`);
        }

        // Obtener tama√±o del archivo
        const stats = fs.statSync(config.jsonFilePath);
        const fileSizeMB = (stats.size / (1024 * 1024)).toFixed(2);
        console.log(`üìè Tama√±o del archivo: ${fileSizeMB} MB\n`);

        // Crear procesador y ejecutar
        const processor = new ProcesarDocumentosJSON(
            config.jsonFilePath,
            config.collectionName,
            config.options
        );

        // Iniciar procesamiento
        await processor.procesarArchivo();

        // Mostrar estad√≠sticas finales
        const stats_final = processor.getStats();
        console.log('\nüìä Estad√≠sticas finales:');
        console.log(`   ‚úÖ Procesados exitosamente: ${stats_final.processedCount.toLocaleString()}`);
        console.log(`   ‚ùå Errores: ${stats_final.errorCount.toLocaleString()}`);
        console.log(`   ‚ö†Ô∏è Saltados: ${stats_final.skippedCount.toLocaleString()}`);
        console.log(`   üìÑ Total procesados: ${stats_final.totalProcessed.toLocaleString()}`);

        if (stats_final.errorCount > 0) {
            console.log(`\nüìã Para revisar errores detallados, consulta: errors_${config.collectionName}.log`);
        }

        console.log('\nüéâ Procesamiento completado exitosamente!');

    } catch (error) {
        console.error('\n‚ùå Error en el procesamiento:', error.message);
        console.error('üìã Stack trace:', error.stack);
        process.exit(1);
    }
}

/**
 * Funci√≥n para procesar solo una muestra peque√±a (para pruebas)
 */
async function procesarMuestra() {
    try {
        console.log('üß™ Procesando muestra de prueba...\n');

        const config = {
            jsonFilePath: process.env.JSON_FILE_PATH || 'c:\\Users\\ljutr\\Desktop\\buscadorDB.normas.json',
            collectionName: 'normas_test', // Colecci√≥n de prueba
            options: {
                batchSize: 5,
                startFrom: 0,
                maxDocuments: 20, // Solo 20 documentos para prueba
                logInterval: 5,
                pauseBetweenBatches: 1000
            }
        };

        const processor = new ProcesarDocumentosJSON(
            config.jsonFilePath,
            config.collectionName,
            config.options
        );

        await processor.procesarArchivo();
        
        const stats = processor.getStats();
        console.log('\nüß™ Muestra completada:');
        console.log(`   ‚úÖ Procesados: ${stats.processedCount}`);
        console.log(`   ‚ùå Errores: ${stats.errorCount}`);
        console.log(`   ‚ö†Ô∏è Saltados: ${stats.skippedCount}`);

    } catch (error) {
        console.error('\n‚ùå Error en la muestra:', error.message);
    }
}

/**
 * Funci√≥n para resumir un procesamiento interrumpido
 */
async function resumirProcesamiento() {
    try {
        console.log('üîÑ Resumiendo procesamiento interrumpido...\n');

        const collectionName = process.env.QDRANT_COLLECTION || 'normas_juridicas';
        
        // El procesador autom√°ticamente cargar√° el progreso del archivo progress_*.json
        const processor = new ProcesarDocumentosJSON(
            process.env.JSON_FILE_PATH || 'c:\\Users\\ljutr\\Desktop\\buscadorDB.normas.json',
            collectionName,
            {
                batchSize: parseInt(process.env.BATCH_SIZE) || 25,
                logInterval: parseInt(process.env.LOG_INTERVAL) || 50,
                pauseBetweenBatches: parseInt(process.env.PAUSE_MS) || 3000
            }
        );

        await processor.procesarArchivo();
        console.log('\nüéâ Procesamiento resumido completado!');

    } catch (error) {
        console.error('\n‚ùå Error resumiendo procesamiento:', error.message);
    }
}

// Ejecutar seg√∫n el argumento de l√≠nea de comandos
const command = process.argv[2];

switch (command) {
    case 'muestra':
    case 'test':
        procesarMuestra();
        break;
    case 'resumir':
    case 'resume':
        resumirProcesamiento();
        break;
    case 'completo':
    case 'full':
    default:
        main();
        break;
}

module.exports = {
    main,
    procesarMuestra,
    resumirProcesamiento
};

const axios = require('axios');

const QDRANT_URL = 'http://localhost:6333';
const COLLECTION_NAME = 'jurisprudencia';

async function fixQdrant() {
  console.log('üîß === DIAGN√ìSTICO Y REPARACI√ìN DE QDRANT ===\n');
  
  const http = axios.create({ timeout: 10000 });
  
  try {
    // 1. Verificar conectividad
    console.log('üì° 1. Verificando conectividad...');
    const healthResponse = await http.get(`${QDRANT_URL}/collections`);
    console.log(`   ‚úÖ Qdrant responde: ${healthResponse.status}`);
    console.log(`   üìä Colecciones existentes: ${healthResponse.data.result.collections.length}`);
    
    // Listar colecciones
    healthResponse.data.result.collections.forEach(col => {
      console.log(`     - ${col.name}`);
    });
    
    // 2. Verificar si existe la colecci√≥n jurisprudencia
    console.log('\nüîç 2. Verificando colecci√≥n jurisprudencia...');
    try {
      const collectionResponse = await http.get(`${QDRANT_URL}/collections/${COLLECTION_NAME}`);
      console.log(`   ‚úÖ Colecci√≥n '${COLLECTION_NAME}' existe`);
      
      const info = collectionResponse.data.result;
      console.log(`   üìä Vectores: ${info.vectors_count || 0}`);
      console.log(`   üìè Dimensiones: ${info.config?.params?.vectors?.size || 'N/A'}`);
      console.log(`   üìê Distancia: ${info.config?.params?.vectors?.distance || 'N/A'}`);
      
    } catch (error) {
      if (error.response?.status === 404) {
        console.log(`   ‚ö†Ô∏è Colecci√≥n '${COLLECTION_NAME}' no existe`);
        console.log('   üîß Creando colecci√≥n...');
        
        await http.put(`${QDRANT_URL}/collections/${COLLECTION_NAME}`, {
          vectors: {
            size: 1024,
            distance: "Cosine"
          },
          optimizers_config: {
            default_segment_number: 4,
            indexing_threshold: 20000
          }
        });
        
        console.log(`   ‚úÖ Colecci√≥n '${COLLECTION_NAME}' creada exitosamente`);
      } else {
        throw error;
      }
    }
    
    // 3. Test de upsert simple
    console.log('\nüì§ 3. Test de upsert simple...');
    const testPoints = [
      {
        id: `test_${Date.now()}`,
        vector: Array(1024).fill(0.1),
        payload: {
          text: "Test document",
          timestamp: new Date().toISOString()
        }
      }
    ];
    
    try {
      const upsertResponse = await http.put(`${QDRANT_URL}/collections/${COLLECTION_NAME}/points`, {
        points: testPoints
      });
      
      if (upsertResponse.data.status === 'ok') {
        console.log('   ‚úÖ Upsert simple exitoso');
      } else {
        console.log('   ‚ùå Upsert fall√≥:', upsertResponse.data);
      }
    } catch (error) {
      console.log('   ‚ùå Error en upsert:', error.response?.data || error.message);
      
      // Diagn√≥stico adicional
      if (error.response?.status === 400) {
        console.log('\nüîç Diagn√≥stico Error 400:');
        console.log('   ‚Ä¢ Verificando formato de vector...');
        
        // Verificar longitud del vector
        if (testPoints[0].vector.length !== 1024) {
          console.log(`   ‚ùå Vector incorrecto: ${testPoints[0].vector.length} dimensiones (esperadas: 1024)`);
        } else {
          console.log('   ‚úÖ Vector tiene 1024 dimensiones');
        }
        
        // Verificar formato de payload
        console.log('   ‚Ä¢ Formato de payload:', JSON.stringify(testPoints[0].payload, null, 2));
      }
    }
    
    // 4. Test de upsert batch
    console.log('\nüì¶ 4. Test de upsert batch (10 vectores)...');
    const batchPoints = Array(10).fill().map((_, i) => ({
      id: `batch_test_${Date.now()}_${i}`,
      vector: Array(1024).fill().map(() => Math.random() - 0.5),
      payload: {
        text: `Batch test document ${i}`,
        batch_index: i,
        timestamp: new Date().toISOString()
      }
    }));
    
    try {
      const batchResponse = await http.put(`${QDRANT_URL}/collections/${COLLECTION_NAME}/points`, {
        points: batchPoints
      });
      
      if (batchResponse.data.status === 'ok') {
        console.log('   ‚úÖ Upsert batch exitoso');
      } else {
        console.log('   ‚ùå Upsert batch fall√≥:', batchResponse.data);
      }
    } catch (error) {
      console.log('   ‚ùå Error en batch upsert:', error.response?.data || error.message);
    }
    
    // 5. Verificar estado final
    console.log('\nüìä 5. Estado final de la colecci√≥n...');
    const finalState = await http.get(`${QDRANT_URL}/collections/${COLLECTION_NAME}`);
    const finalInfo = finalState.data.result;
    
    console.log(`   üìä Vectores totales: ${finalInfo.vectors_count || 0}`);
    console.log(`   üíæ Tama√±o en disco: ${finalInfo.disk_data_size || 'N/A'}`);
    console.log(`   üîç Estado: ${finalInfo.status}`);
    
    console.log('\n‚úÖ Diagn√≥stico completado - Qdrant deber√≠a funcionar ahora');
    
  } catch (error) {
    console.error('\n‚ùå Error en diagn√≥stico:', error.message);
    if (error.response) {
      console.error('   Status:', error.response.status);
      console.error('   Data:', error.response.data);
    }
  }
}

// Funci√≥n para limpiar tests
async function cleanupTests() {
  console.log('\nüßπ Limpiando datos de test...');
  
  const http = axios.create({ timeout: 10000 });
  
  try {
    // Eliminar puntos de test
    const deleteResponse = await http.post(`${QDRANT_URL}/collections/${COLLECTION_NAME}/points/delete`, {
      filter: {
        must: [
          {
            key: "text",
            match: {
              text: "test"
            }
          }
        ]
      }
    });
    
    console.log('‚úÖ Datos de test eliminados');
  } catch (error) {
    console.log('‚ö†Ô∏è No se pudieron eliminar todos los datos de test');
  }
}

// Ejecutar
if (require.main === module) {
  const args = process.argv.slice(2);
  if (args.includes('--clean')) {
    cleanupTests();
  } else {
    fixQdrant();
  }
}

module.exports = { fixQdrant, cleanupTests };
